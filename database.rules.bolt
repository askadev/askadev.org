type Region {
  displayName: String | Null
}

path /regions {
  read() { everyone() }
  write() { isSuperAdmin() }
}

path /regions/{regionId} is Region {}

type Event {
  startTime: Number,
  endTime: Number,
  region: String,
  displayName: String,
  location: String | Null,
  mapsUrl: String,
  createdBy: String,
  createdAt: Number
}

path /events {
  read() { everyone() }
  index() { ['startTime', 'endTime'] }
}

path /events/{eventId} is Event {
  write() {
    isAuthed() &&
    (
      isSuperAdmin() ||
      this !== null && prior(this) === null ||
      auth.uid === prior(root.events[eventId].region)
    )
  }
}

type Coordinates {
  lat: Number,
  lng: Number
}

type Location {
  uid: String,
  address: String,
  displayName: String,
  location: Coordinates,
  mapsUrl: String,
  phoneNumber: String | Null,
  website: String | Null
}

path /locations {
  read() { everyone() }
}

path /locations/{locationId} is Location {
  write() {
    isAuthed() &&
    (
      this !== null && prior(this) === null ||
      this !== null && prior(this) !== null
    )
  }
}

type UserInfo {
  displayName: String | Null,
  firebaseId: String | Null,
  uid: Number | String | Null,
  githubId: Number | String | Null,
  githubUsername: String | Null,
  photoURL: String | Null,
  region: String | Null,
  developingSince: String | Number | Null,
  skills: String | Null,
  url: String | Null,
  shouldNotDisplay: Boolean | Null
}

path /users {
  read() { everyone() }
}

path /users/{userId} is UserInfo {
  write() {
    (hasApprovedGithub() && isUser(userId)) ||
    isSuperAdmin()
  }
}

path /githubUsers {
  read() { everyone() }
}

path /githubUsers/{userId} is UserInfo {
  write() {
    (
      root.githubUsers[userId] !== null &&
      prior(root.githubUsers[userId].firebaseId) === null
    ) ||
    (
      hasApprovedGithub() &&
      isUser(root.githubUsers[userId].firebaseId)
    ) ||
    isSuperAdmin()
  }
}

path /superAdmins {
  read() { isAuthed() }
}

isUser(uid) { auth.uid === uid }
everyone() { auth.uid == null || auth != null }
isAuthed() { auth !== null }
isSuperAdmin() { root.superAdmins[auth.uid] !== null }
hasApprovedGithub() { root.githubUsers[ root.users[auth.uid].githubId ] !== null }

type TimeString extends String {
  validate() { this.length > 19 && this.length < 25 && this.test(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.?\d{3}?Z$/) }
}
